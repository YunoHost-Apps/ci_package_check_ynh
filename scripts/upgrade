#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
ci_type=$(ynh_app_setting_get --app=$app --key=ci_type)
yunorunner_instance=$(ynh_app_setting_get --app=$app --key=yunorunner_instance)
cluster=$(ynh_app_setting_get --app=$app --key=cluster)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	pushd "$final_path"
		ynh_exec_warn_less git fetch --quiet --depth=1 origin "$ci_release"
		ynh_exec_warn_less git reset --quiet --hard FETCH_HEAD
	popd
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $yunorunner_instance:www-data "$final_path"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies
#app_dependencies="$app_dependencies yunorunner?domain=$domain&path=$path_url&ci_package_check_path=$final_path&ci_package_check_datadir=$datadir"
ynh_install_apps --apps="$app_dependencies"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

pushd $final_path
	ynh_exec_warn_less ynh_exec_as $yunorunner_instance pip3 install xmpppy
	ynh_exec_warn_less ynh_exec_as $yunorunner_instance $final_path/badges/get_badges.sh
popd

ynh_arch=$YNH_ARCH
ynh_add_config --template="config" --destination="$final_path/config"

chmod 400 "$final_path/config"
chown $yunorunner_instance:$yunorunner_instance "$final_path/config"

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

if [ $cluster -eq 1 ]
then
	yunohost service add lxd --log="/var/log/lxd/lxd.log" --needs_exposed_ports 8443
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last

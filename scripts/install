#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

ci_type=$YNH_APP_ARG_CI_TYPE
cluster=$YNH_APP_ARG_CLUSTER
password=$YNH_APP_ARG_PASSWORD
yunorunner_instance=$YNH_APP_ARG_YUNORUNNER_INSTANCE
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

# Checking yunorunner_instance
use_new_yunorunner_instance=0
if [ -z "$yunorunner_instance" ]; then
	use_new_yunorunner_instance=1
else
	if ! yunohost app list --output-as json --quiet | jq -e --arg id $yunorunner_instance '.apps[] | select(.id == $id)' >/dev/null
	then
		ynh_die --message="The yunorunner_instance $yunorunner_instance you provided does not exist"
	fi
fi
use_new_lxd_instance=0
if ! yunohost app list --output-as json --quiet | jq -e --arg id lxd '.apps[] | select(.id == $id)' >/dev/null
then
	use_new_lxd_instance=1
fi

final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

datadir=/home/yunohost.app/$app

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=1

ynh_app_setting_set --app=$app --key=password --value=$password
ynh_app_setting_set --app=$app --key=ci_type --value=$ci_type
ynh_app_setting_set --app=$app --key=cluster --value=$cluster
ynh_app_setting_set --app=$app --key=yunorunner_instance --value=$yunorunner_instance
ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies
if [ $use_new_yunorunner_instance -eq 1 ]; then
	#app_dependencies="$app_dependencies yunorunner?domain=$domain&path=$path_url&ci_package_check_path=$final_path&ci_package_check_datadir=$datadir"
	yunohost app install https://github.com/YunoHost-Apps/yunorunner_ynh/tree/f60a50aa9c1daacea6faa7b85018d5b0c95746bb --force --args "domain=$domain&path=$path_url&ci_package_check_path=$final_path&ci_package_check_datadir=$datadir"
fi
ynh_install_apps --apps="$app_dependencies"
if [ $use_new_yunorunner_instance -eq 1 ]; then
	yunorunner_instance=$(yunohost app list --output-as json --quiet | jq -re '.apps[] | select(.id  | contains("yunorunner")) | .id' | sort -V | tail -1)
	ynh_app_setting_set --app=$app --key=yunorunner_instance --value=$yunorunner_instance
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
git init "$final_path"
pushd "$final_path"
	git remote add origin "$ci_repository"
	git fetch --quiet --depth=1 origin "$ci_release"
	git reset --quiet --hard FETCH_HEAD
popd

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $yunorunner_instance:www-data "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..." --weight=1

ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir/logs
mv $final_path/badges $datadir/
mv $final_path/summary $datadir/
ynh_exec_as $yunorunner_instance ln -fs $datadir/badges $final_path/badges
ynh_exec_as $yunorunner_instance ln -fs $datadir/logs $final_path/logs
ynh_exec_as $yunorunner_instance ln -fs $datadir/summary $final_path/summary

chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $yunorunner_instance:www-data "$datadir"

#=================================================
# CONFIGURE YUNORUNNER
#=================================================

if [[ $yunorunner_instance == *"yunorunner"* ]]
then
	ynh_script_progression --message="Configuring YunoRunner..." --weight=1
	# Retrieve YunoRunner settings
	yunorunner_port=$(ynh_app_setting_get --app=$yunorunner_instance --key=port)
	yunorunner_final_path=$(ynh_app_setting_get --app=$yunorunner_instance --key=final_path)

	# Stop YunoRunner
	ynh_systemd_action --service_name=$yunorunner_instance --action="stop" --log_path="systemd" --line_match="Stopped YunoRunner CI"

	if [ $use_new_yunorunner_instance -eq 1 ]; then
		# Remove the original database, in order to rebuilt it with the new config.
		ynh_secure_remove --file="$yunorunner_final_path/db.sqlite"

		# Create a random token for ciclic
		cat /dev/urandom | tr -dc _A-Za-z0-9 | head -c80 | tee $yunorunner_final_path/token $yunorunner_final_path/tokens
	fi

	# For automatic / "main" CI we want to auto schedule jobs using the app list
	if [ $ci_type == "auto" ]
	then
		monitor_apps_list="True"
		monitor_git="True"
		monitor_only_good_quality_apps="False"
		monthly_jobs="True"
		worker_count="1"
	# For Dev CI, we want to control the job scheduling entirely
	# (c.f. the github webhooks or scan_for_new_jobs_from_chroots cron job)
	else
		monitor_apps_list="False"
		monitor_git="False"
		monitor_only_good_quality_apps="False"
		monthly_jobs="False"
		worker_count="1"
	fi
	ynh_app_setting_set --app=$app --key=monitor_apps_list --value=$monitor_apps_list
	ynh_app_setting_set --app=$app --key=monitor_git --value=$monitor_git
	ynh_app_setting_set --app=$app --key=monitor_only_good_quality_apps --value=$monitor_only_good_quality_apps
	ynh_app_setting_set --app=$app --key=monthly_jobs --value=$monthly_jobs
	ynh_app_setting_set --app=$app --key=worker_count --value=$worker_count

	ynh_add_config --template="yunorunner.config.py" --destination="$yunorunner_final_path/config.py"

	chmod 400 "$yunorunner_final_path/config.py"
	chown $yunorunner_instance:$yunorunner_instance "$yunorunner_final_path/config.py"

	yunohost app makedefault -d "$domain" $yunorunner_instance
fi

#=================================================
# CONFIGURE LXD
#=================================================
ynh_script_progression --message="Configuring LXD..." --weight=1

if [ $use_new_lxd_instance -eq 1 ]
then
	if [ $cluster -eq 1 ]
	then
		local free_space=$(df --output=avail / | sed 1d)
		local btrfs_size=$(( $free_space * 90 / 100 / 1024 / 1024 ))
		local lxc_network=$((1 + $RANDOM % 254))

		yunohost firewall allow TCP 8443
		ynh_add_config --template="preseed.conf" --destination="$final_path/preseed.conf"
		cat "$final_path/preseed.conf" | lxd init --preseed
		ynh_delete_file_checksum --file="$final_path/preseed.conf"
		ynh_secure_remove --file="$final_path/preseed.conf"
		lxc config set core.https_address [::]
	else
		lxd init --auto --storage-backend=dir
	fi
fi
# ci_user will be the one launching job, gives it permission to run lxd commands
usermod -a -G lxd $yunorunner_instance

# We need a home for the "su" command later ?
mkdir -p /home/$yunorunner_instance
chown -R $yunorunner_instance /home/$yunorunner_instance

su $yunorunner_instance -s /bin/bash -c "lxc remote add yunohost https://devbaseimgs.yunohost.org --public --accept-certificate"

lxdbr0_network_address=$(lxc network get lxdbr0  ipv4.address | cut -d'.' -f1-3)
mkdir -p "/etc/yunohost/hooks.d/post_iptable_rules/"
ynh_add_config --template="95-lxd-custom" --destination="/etc/yunohost/hooks.d/post_iptable_rules/95-lxd-custom"
chmod +x /etc/yunohost/hooks.d/post_iptable_rules/95-lxd-custom
/etc/yunohost/hooks.d/post_iptable_rules/95-lxd-custom

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

pushd $final_path
	ynh_exec_as $yunorunner_instance pip3 install xmpppy
	ynh_exec_as $yunorunner_instance git clone https://github.com/YunoHost/package_check "./package_check"
	ynh_exec_as $yunorunner_instance $final_path/badges/get_badges.sh
popd

ynh_arch=$YNH_ARCH
ynh_add_config --template="config" --destination="$final_path/config"

chmod 400 "$final_path/config"
chown $yunorunner_instance:$yunorunner_instance "$final_path/config"

#=================================================
# SETUP CRON
#=================================================
ynh_script_progression --message="Configuring a cron..." --weight=1

ynh_add_config --template="cron" --destination="/etc/cron.d/$app"

#=================================================
# GENERIC FINALIZATION
#=================================================
# START SYSTEMD SERVICE
#=================================================

if [[ $yunorunner_instance == *"yunorunner"* ]]
then
	ynh_script_progression --message="Starting a systemd service..." --weight=1

	# Start a systemd service
	ynh_systemd_action --service_name=$yunorunner_instance --action="start" --log_path="systemd" --line_match="Started YunoRunner CI" --timeout=30
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
